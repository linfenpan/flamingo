2015年10月学习计划

(OK)1、写一套 sea.js

https://github.com/linfenpan/projectM

模仿 node.js 
不需要 define，一个文件，就是一个class，就像node.js一样
---> 最后，为了方便调试，还是需要 define 的
功能也只是支持 浏览器 而已，不考虑什么后端啊之类的。
兼容至 ie7

	1、使用上，统一只有 require 和 define 两个关键字。
	   require 支持第二个参数回调
	   define 每个文件，必须有一个 没指定 名字的模块[即define]，作为文件程序的入口

	2、支持“类跨域”的请求
	   define(function(require, module, exports){/** 这是普通板块的定义 **/})
	   define(function(){/*! 这是跨域资源的定义，获取到的，是这注释之间的内容，最前面的!不能省略 */})

	3、支持引入路径的 模板 方法
		require("${basePath}/data/data.js");

	4、支持同域下，资源的ajax获取
		var style = require("./css/data.css");	// 获取到字符串
		var html = require("./html/data.html");

	5、支持不同后缀，可拓展的获取内容方式
		// 如果遇到 less 后缀，获取到的，都是“这是less的内容” + 内容
		require.addTypeProcesser("less", function(url, next){
			// 发送ajax请求，只支持 get 请求
			require.ajax(url, function(error, url, text){
				next("这是less的内容" + text);
			});
		});

	6、支持项目配置
		在引用 project.js 前，定义全局变量 Project，可对项目进行配置
		var Project = {
			path: {
				// 配置require引入路径的模板变量
				// basePath 是项目加载内容的基础路径，默认是页面第1个脚本所在的目录，如果指定了id="projectnode"的脚本，就指向改脚本的目录
				// 如果有 设置 basePath，则会根据 basePath来设置基础路径，支持绝对路径和相对路径
				basePath: "./"
			},
			other: {
				// 指定 已经 加载的 require 列表
				// var str = require("$"); ==> 这个是$符号
				// 可用户注入 jquery 等外部插件
				"$": "这是个$符号"
			}
		};
	

(OK)2、css3 渐变

看了简单的线性 和 放射性 渐变
	a) 线性渐变
		background:linear-gradient(to right bottom, red, blue);
		background:repeating-linear-gradient(red, blue 20%, black 30%);
		从红色开始，到20%的时候，完全变为蓝色，到30%的时候，完全变为黑色。重复 0% - 30% 这个变化
	
	b) 放射性渐变
		background: radial-gradient(circle|ellipse[默认形状], red, blue);
		==> background: radial-gradient(red, blue); 椭圆的渐变
		==> background: radial-gradient(circle, red, blue); 圆形的渐变
		==> background: radial-gradient(60% 60%, circle, red, blue 30%); 圆心在(60%,60%)位置的圆形渐变
		0%是红色，渐变到蓝色，从 30% 开始，就是纯蓝色
		
		background: repeating-radial-gradient(center, circle, red, blue 5%, black 10%);
	
	background-image 配合 background-size，可构建很多重复的图形，类似:
		做出一个 格子 的背景
		.rect{
			margin:20px;
			width:200px;height:200px;
			border-radius:100px;
			box-shadow:0 0 0 10px rgba(255, 255, 255, .4) inset;
			
			background-image: 
				linear-gradient(-45deg, black 25%, transparent 25%, transparent 75%, black 75%, black), 
				linear-gradient(-45deg, black 25%, transparent 25%, transparent 75%, black 75%, black);
			background-size: 50px 50px;
			/* size 的一半 */
			background-position: 0 0, 25px 25px;
		}
		
(OK)3、css3裁剪
	clip: rect(top, right, bottom, left);
	其中的对应的值，是剪切rect的上、右、下、左边线
	
	针对 ie7 及一下的浏览器，其中 rect 中的逗号，需要省略
	clip: rect(top right bottom left);
	
	clip 裁剪，只能对绝对和固定的元素生效，它的作用是：让这个元素的某个区域可见，其它区域不可见。
	被裁剪掉的部分，是透明的
	
(OK)4、手势识别
简单的做了方向检测、封装了可左右滑动的列表
https://github.com/linfenpan/collection/tree/master/plugins/touch

(FAIL)5、node.js的freemaker.js
资料太少，暂时放下

(OK)6、带进度的图片上传
主要使用 FormData 进行表单的组装，XMLHttpRequest对象，新增的 xhr.upload 对象中，有完整的 progress 信息


(OK)7、node.js 如何监听文件更变呢
node 的 watch 板块，好像就可以满足这个需求，不过，速度挺慢的。往往需要等待半秒，才有反应。
另一个是 chokidar，这个东西，速度很快，参数也很齐全，推荐使用


(OK)8、phantom.js
它是个打开独立浏览器进程的玩意，用于抓图，抓请求，做自动化的一些测试，非常的不错。
有着单独的 内库，跟平常的node.js不怎么一致。


(OK)9、重新整理 project.js
删除了 Callback 对象，把 define 两个参数时的BUG，修复了一次，把路径模板修正数序调整了一次

(OK)10、重新整理 project.js 打包程序
md5打包吧!



===================== 上月遗留 ===========================

3、fis的路径引入[__inline功能]，当有子文件夹的时候，不好使。
试着重写自己的 __inline 功能

4、css3渐变

5、swipe.js
